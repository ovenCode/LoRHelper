// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data.db;

#nullable disable

namespace desktop.Migrations
{
    [DbContext(typeof(LoRDbContext))]
    partial class LoRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventureDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdventureType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventureNodeDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdventureDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompletionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdventureDTOId");

                    b.ToTable("AdventureNodes");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventurePowerDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdventureDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdventureNodeDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetFullAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionRaw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PowerCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("PowerState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("RarityRef")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdventureDTOId");

                    b.HasIndex("AdventureNodeDTOId");

                    b.ToTable("AdventurePowers");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AttachmentDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("POCCardDTOId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("POCCardDTOId");

                    b.ToTable("AttachmentDTO");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AttachmentInfoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttachmentDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentDTOId");

                    b.ToTable("AttachmentInfoDTO");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.ItemDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetFullAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionRaw")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("RarityRef")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.MatchDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeckCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.POCCardDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdventureNodeDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardImage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardViewRect")
                        .HasColumnType("TEXT");

                    b.Property<int>("CopiesInDeck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CopiesRemaining")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrawProbability")
                        .HasColumnType("TEXT");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdventureNodeDTOId");

                    b.ToTable("AdventureDeck");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.RegionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchDTOId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MatchDTOId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchDTOId");

                    b.HasIndex("MatchDTOId1");

                    b.ToTable("RegionDTO");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.RelicDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetFullAbsolutePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionRaw")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<string>("RarityRef")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelicCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Relics");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventureNodeDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.AdventureDTO", null)
                        .WithMany("Nodes")
                        .HasForeignKey("AdventureDTOId");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventurePowerDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.AdventureDTO", null)
                        .WithMany("Powers")
                        .HasForeignKey("AdventureDTOId");

                    b.HasOne("desktop.data.Models.DTOs.AdventureNodeDTO", null)
                        .WithMany("Powers")
                        .HasForeignKey("AdventureNodeDTOId");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AttachmentDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.POCCardDTO", null)
                        .WithMany("Attachments")
                        .HasForeignKey("POCCardDTOId");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AttachmentInfoDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.AttachmentDTO", null)
                        .WithMany("AttachmentInfo")
                        .HasForeignKey("AttachmentDTOId");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.POCCardDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.AdventureNodeDTO", null)
                        .WithMany("Deck")
                        .HasForeignKey("AdventureNodeDTOId");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.RegionDTO", b =>
                {
                    b.HasOne("desktop.data.Models.DTOs.MatchDTO", null)
                        .WithMany("OpponentRegions")
                        .HasForeignKey("MatchDTOId");

                    b.HasOne("desktop.data.Models.DTOs.MatchDTO", null)
                        .WithMany("Regions")
                        .HasForeignKey("MatchDTOId1");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventureDTO", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("Powers");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AdventureNodeDTO", b =>
                {
                    b.Navigation("Deck");

                    b.Navigation("Powers");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.AttachmentDTO", b =>
                {
                    b.Navigation("AttachmentInfo");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.MatchDTO", b =>
                {
                    b.Navigation("OpponentRegions");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("desktop.data.Models.DTOs.POCCardDTO", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
